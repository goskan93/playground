{"version":3,"sources":["components/Button/Button.js","components/RadioButton/RadioButton.js","containers/TicTacToeGame/TicTacToe.js"],"names":["button","props","className","btnClass","onClick","click","disabled","label","RadioButton","type","value","checked","onChange","playerIcons","Player1","FaCircleNotch","Player2","FaTimes","Grid","useState","hover","setHover","Icon","class","IconHover","player","onMouseEnter","gameFinished","onMouseLeave","size","color","TicTacToe","setSize","arrLen","currentPlayer","setCurrentPlayer","Array","playAray","setPlayArray","finished","setFinished","text","setText","index","updatedArray","arr","col","row","Math","floor","sumRow","i","sumCol","diagL","diagR","isWinner","filter","Boolean","length","prevPlayer","onResetGame","onChangeGridSize","event","target","style","textAlign","map","el","Button","gridTemplateColumns","repeat","gridTemplateRows","fill","_","key"],"mappings":"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","file":"static/js/4.969fb068.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst button = (props) => (\r\n  <button className={`Button ${props.btnClass}`} onClick={props.click} disabled={props.disabled ? props.disabled : false}>\r\n    {props.label}\r\n  </button>\r\n);\r\n\r\nexport default button;\r\n","import React from \"react\";\r\nimport \"./RadioButton.css\";\r\nconst RadioButton = (props) => {\r\n  return (\r\n    <>\r\n      {/* <div className=\"RadioButton-Container\"> */}\r\n      <label className=\"RadioButton-Container\">\r\n        <input type=\"radio\" value={props.value} checked={props.checked} onChange={props.onChange} />\r\n        {props.label}\r\n      </label>\r\n      {/* </div> */}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default RadioButton;\r\n","import React, { useState } from \"react\";\r\nimport \"./TicTacToe.css\";\r\nimport { FaCircleNotch, FaTimes } from \"react-icons/fa\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport RadioButton from \"../../components/RadioButton/RadioButton\";\r\n\r\nconst playerIcons = {\r\n  Player1: FaCircleNotch,\r\n  Player2: FaTimes,\r\n};\r\n\r\nconst Grid = (props) => {\r\n  const [hover, setHover] = useState(false);\r\n\r\n  const onMouseOver = () => {\r\n    !props.gameFinished && setHover(true);\r\n  };\r\n\r\n  const onMouseOut = () => {\r\n    !props.gameFinished && setHover(false);\r\n  };\r\n\r\n  const Icon = props.class ? playerIcons[props.class] : null;\r\n  const IconHover = playerIcons[props.player];\r\n\r\n  return (\r\n    <li className={props.class} onMouseEnter={onMouseOver} onMouseLeave={onMouseOut} onClick={props.click}>\r\n      {Icon ? <Icon size={`${10 / props.size}rem`} color=\"#fff\" /> : hover && <IconHover size={`${9 / props.size}rem`} color=\"#ccc\" />}\r\n    </li>\r\n  );\r\n};\r\n\r\nconst TicTacToe = () => {\r\n  const [size, setSize] = useState(3);\r\n  const arrLen = size ** 2;\r\n\r\n  const [currentPlayer, setCurrentPlayer] = useState(1);\r\n  const [playAray, setPlayArray] = useState(Array(arrLen));\r\n  const [finished, setFinished] = useState(false);\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const isWinner = (arr, index) => {\r\n    const col = index % size;\r\n    const row = Math.floor(index / size);\r\n\r\n    let sumRow = 0;\r\n    for (let i = row * size; i < row * size + size; i++) {\r\n      sumRow += arr[i] ? (arr[i] === \"Player1\" ? 1 : -1) : 0;\r\n    }\r\n\r\n    if (sumRow === size || sumRow === -size) {\r\n      return true;\r\n    }\r\n\r\n    let sumCol = 0;\r\n    for (let i = col; i < arrLen; i = i + size) {\r\n      sumCol += arr[i] ? (arr[i] === \"Player1\" ? 1 : -1) : 0;\r\n    }\r\n    if (sumCol === size || sumCol === -size) {\r\n      return true;\r\n    }\r\n\r\n    if (col === row || (col === 0 && row === size - 1) || (row === 0 && col === size - 1)) {\r\n      let diagL = 0;\r\n      for (let i = 0; i < arrLen; i = i + size + 1) {\r\n        diagL += arr[i] ? (arr[i] === \"Player1\" ? 1 : -1) : 0;\r\n      }\r\n      if (diagL === size || diagL === -size) {\r\n        return true;\r\n      }\r\n      let diagR = 0;\r\n      for (let i = size - 1; i < arrLen - 1; i = i + size - 1) {\r\n        diagR += arr[i] ? (arr[i] === \"Player1\" ? 1 : -1) : 0;\r\n      }\r\n      if (diagR === size || diagR === -size) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  };\r\n\r\n  const onClick = (index) => {\r\n    if (!finished) {\r\n      let updatedArray = playAray;\r\n      if (!updatedArray[index]) {\r\n        updatedArray[index] = `Player${currentPlayer}`;\r\n        const isWinnerFla = isWinner(updatedArray, index);\r\n        if (isWinnerFla) {\r\n          setFinished(true);\r\n          setText(`Game Over! Player ${currentPlayer} won`);\r\n        } else {\r\n          if (updatedArray.filter(Boolean).length < arrLen) {\r\n            setPlayArray(updatedArray);\r\n            setCurrentPlayer((prevPlayer) => (prevPlayer === 1 ? 2 : 1));\r\n          } else {\r\n            setFinished(true);\r\n            setText(`Game Over! Nobody won :(`);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n  const onResetGame = () => {\r\n    setCurrentPlayer(1);\r\n    setPlayArray(Array(arrLen));\r\n    setFinished(false);\r\n    setText(\"\");\r\n  };\r\n\r\n  const onChangeGridSize = (event) => {\r\n    setSize(+event.target.value);\r\n    onResetGame();\r\n  };\r\n\r\n  return (\r\n    <div className=\"TTT-Container\">\r\n      <h3 style={{ textAlign: \"center\" }}>{text ? text : `Player ${currentPlayer}`}</h3>\r\n      <div className=\"RadioButtons-Container\">\r\n        {[3, 5, 7].map((el) => (\r\n          <RadioButton label={el} value={el} checked={size === el} onChange={onChangeGridSize} />\r\n        ))}\r\n      </div>\r\n      <div className=\"Buttons-Container\">\r\n        <Button label=\"PLAY AGAIN\" click={onResetGame} btnClass=\"BtnLight\" />\r\n      </div>\r\n      <ul\r\n        className={finished ? \"TTT-Grid Disabled\" : \"TTT-Grid\"}\r\n        style={{ gridTemplateColumns: \"1fr \".repeat(size), gridTemplateRows: \"1fr \".repeat(size) }}\r\n      >\r\n        {Array(arrLen)\r\n          .fill()\r\n          .map((_, index) => (\r\n            <Grid\r\n              key={index}\r\n              player={`Player${currentPlayer}`}\r\n              click={() => onClick(index)}\r\n              class={playAray[index]}\r\n              gameFinished={finished}\r\n              size={size}\r\n            />\r\n          ))}\r\n      </ul>\r\n      {/* <button onClick={onResetGame}>Start again</button> */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TicTacToe;\r\n"],"sourceRoot":""}