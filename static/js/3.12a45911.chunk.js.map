{"version":3,"sources":["components/Button/Button.js","utility/treasureGridGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","containers/MemoryGame/Memory.js"],"names":["button","props","className","btnClass","onClick","click","disabled","label","generateRandom","max","Math","round","random","generateTreasureGrid","grid","Array","filter","Boolean","length","index","j","i","floor","from","item","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","unsupportedIterableToArray","TypeError","Memory","useState","gameGrid","setGameGrid","gameFinished","setGameFinished","fill","guessArray","setGuessArray","checked","setChecked","countScore","setScore","useEffect","onSetGame","FaCat","FaGem","FaAnchor","FaAppleAlt","FaBabyCarriage","FaBalanceScale","FaBomb","FaCannabis","forEach","Icon","console","log","style","textAlign","map","_","includes","updateChecked","prevScore","setTimeout","updatedGuesArray","x","onClickBox","key","size"],"mappings":"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","file":"static/js/3.12a45911.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst button = (props) => (\r\n  <button className={`Button ${props.btnClass}`} onClick={props.click} disabled={props.disabled ? props.disabled : false}>\r\n    {props.label}\r\n  </button>\r\n);\r\n\r\nexport default button;\r\n","// ExAMPLE const grid = [3, 4, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 4, 3, 2, 1];\r\n\r\nexport const generateRandom = (max) => {\r\n  return Math.round(Math.random() * max) + 0;\r\n};\r\n\r\nconst generateTreasureGrid = () => {\r\n  let grid = new Array(25);\r\n  while (grid.filter(Boolean).length < 3) {\r\n    let index = generateRandom(24);\r\n    if (!grid[index]) {\r\n      grid[index] = 4;\r\n    }\r\n  }\r\n\r\n  let j = 4;\r\n  while (j > 1) {\r\n    for (let i = 0; i < grid.length; i++) {\r\n      if (grid[i] === j) {\r\n        if (Math.floor(i / 5) === Math.floor((i - 1) / 5) && !grid[i - 1]) grid[i - 1] = j - 1;\r\n        if (Math.floor(i / 5) === Math.floor((i + 1) / 5) && !grid[i + 1]) grid[i + 1] = j - 1;\r\n        if (i - 5 >= 0 && !grid[i - 5]) grid[i - 5] = j - 1;\r\n        if (i + 5 < 25 && !grid[i + 5]) grid[i + 5] = j - 1;\r\n      }\r\n    }\r\n    j--;\r\n  }\r\n  const gridPlay = Array.from(grid, (item) => item || 1);\r\n  return gridPlay;\r\n};\r\nexport default generateTreasureGrid;\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\r\nimport \"./Memory.css\";\r\nimport { FaCat, FaGem, FaAnchor, FaAppleAlt, FaBabyCarriage, FaBalanceScale, FaBomb, FaCannabis } from \"react-icons/fa\";\r\nimport { generateRandom } from \"../../utility/treasureGridGenerator\";\r\nimport Button from \"../../components/Button/Button\";\r\n\r\nconst Memory = () => {\r\n  const [gameGrid, setGameGrid] = useState({});\r\n  const [gameFinished, setGameFinished] = useState(false);\r\n  const [guessArray, setGuessArray] = useState(Array(16).fill(false));\r\n  const [checked, setChecked] = useState([]);\r\n  const [countScore, setScore] = useState(0);\r\n\r\n  useEffect(() => {\r\n    onSetGame();\r\n  }, []);\r\n\r\n  const onSetGame = () => {\r\n    let gameGrid = {};\r\n    const icons = [FaCat, FaGem, FaAnchor, FaAppleAlt, FaBabyCarriage, FaBalanceScale, FaBomb, FaCannabis];\r\n    icons.forEach((Icon) => {\r\n      let i = 0;\r\n      while (i < 2) {\r\n        let index = generateRandom(15);\r\n        if (!gameGrid[index]) {\r\n          gameGrid[index] = Icon;\r\n          i++;\r\n        }\r\n      }\r\n    });\r\n    console.log(gameGrid);\r\n    setGameGrid(gameGrid);\r\n  };\r\n\r\n  const onClickBox = (index) => {\r\n    const updateChecked = [...checked, index];\r\n    setChecked(updateChecked);\r\n    if (updateChecked.length === 2) {\r\n      setScore((prevScore) => prevScore + 1);\r\n      setTimeout(() => {\r\n        if (gameGrid[updateChecked[0]] === gameGrid[updateChecked[1]]) {\r\n          let updatedGuesArray = guessArray;\r\n          updatedGuesArray[updateChecked[0]] = true;\r\n          updatedGuesArray[updateChecked[1]] = true;\r\n          setGuessArray(updatedGuesArray);\r\n          if (updatedGuesArray.filter((x) => !x).length === 0) {\r\n            setGameFinished(true);\r\n          }\r\n        }\r\n        setChecked([]);\r\n      }, 500);\r\n    }\r\n  };\r\n  const onResetGame = () => {\r\n    setGameFinished(false);\r\n    onSetGame();\r\n    setGuessArray(Array(16).fill(false));\r\n    setChecked([]);\r\n    setScore(0);\r\n  };\r\n\r\n  return (\r\n    <div className=\"Treasure-Container\">\r\n      <h3 style={{ textAlign: \"center\" }}> {gameFinished ? `Game Finished! Youre score ${countScore}` : `No. of try: ${countScore}`} </h3>\r\n\r\n      <div className=\"Buttons-Container\">\r\n        <Button label=\"PLAY AGAIN\" click={onResetGame} btnClass=\"BtnLight\" />\r\n      </div>\r\n      <ul className=\"Memory-Grid\">\r\n        {Array(16)\r\n          .fill()\r\n          .map((_, index) => {\r\n            let className = checked.includes(index) || guessArray[index] ? \"Open\" : \"\";\r\n            let Icon = gameGrid[index];\r\n            return (\r\n              <li onClick={() => onClickBox(index)} key={index} className={className}>\r\n                {className && <Icon size=\"3rem\" />}\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Memory;\r\n"],"sourceRoot":""}