{"version":3,"sources":["containers/Layout/Header/Header.js","containers/Layout/Layout.js","components/Cube/Cube.js","containers/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","className","to","NavigationDesktop","NavigationMobile","openDrawer","toggleDrawerHandler","navClass","push","onClick","size","join","withRouter","useState","setOpenDrawer","prevState","history","color","layout","children","Cube","class","Home","style","width","height","position","margin","Treasure","React","lazy","routes","path","Component","App","fallback","map","key","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAMMA,EAAa,SAACC,GAAD,OACjB,oCACE,kBAAC,IAAD,CAASC,UAAU,WAAWC,GAAG,cAAjC,eAGA,kBAAC,IAAD,CAASD,UAAU,WAAWC,GAAG,aAAjC,YAGA,kBAAC,IAAD,CAASD,UAAU,WAAWC,GAAG,WAAjC,YAMEC,EAAoB,kBACxB,yBAAKF,UAAU,eACb,kBAAC,EAAD,QAGEG,EAAmB,SAACJ,GAAW,IAC3BK,EAAoCL,EAApCK,WAAYC,EAAwBN,EAAxBM,oBAChBC,EAAW,CAAC,cAEhB,OADKF,GAAYE,EAASC,KAAK,SAE7B,yBAAKP,UAAU,UACb,yBAAKA,UAAU,UAAUQ,QAASH,GAC/BD,EAAa,kBAAC,IAAD,CAASK,KAAK,WAAc,kBAAC,IAAD,CAAQA,KAAK,YAEzD,yBAAKT,UAAWM,EAASI,KAAK,KAAMF,QAASH,GAC3C,kBAAC,EAAD,SA8BOM,eAxBA,SAACZ,GAAW,IAAD,EACYa,oBAAS,GADrB,mBACjBR,EADiB,KACLS,EADK,KAGlBR,EAAsB,WAC1BQ,GAAc,SAACC,GAAD,OAAgBA,MAOhC,OACE,4BAAQd,UAAU,UAChB,yBAAKA,UAAU,OAAOQ,QANN,WAClBT,EAAMgB,QAAQR,KAAK,KACnBF,MAKI,kBAAC,IAAD,CAAQI,KAAK,OAAOO,MAAM,UAE5B,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAkBZ,WAAYA,EAAYC,oBAAqBA,SCjDxDY,G,MAPA,SAAClB,GAAD,OACb,yBAAKC,UAAU,UACb,kBAAC,EAAD,MACA,8BAAOD,EAAMmB,aCQFC,G,YAXF,kBACX,yBAAKC,MAAM,eACT,yBAAKA,MAAM,SAAX,KACA,yBAAKA,MAAM,SAAX,KACA,yBAAKA,MAAM,SAAX,KACA,yBAAKA,MAAM,SAAX,KACA,yBAAKA,MAAM,SAAX,KACA,yBAAKA,MAAM,SAAX,QCKWC,EAXF,kBACX,yBAAKrB,UAAU,QACb,gDACA,uFAEA,yBAAKsB,MAAO,CAAEC,MAAO,QAASC,OAAQ,QAASC,SAAU,WAAYC,OAAQ,cAC3E,kBAAC,EAAD,SCHAC,G,MAAWC,IAAMC,MAAK,kBAAM,iCAI5BC,EAAS,CACb,CAAEC,KAAM,IAAKC,UAAWX,GACxB,CAAEU,KAAM,aAAcC,UALNJ,IAAMC,MAAK,kBAAM,iCAMjC,CAAEE,KAAM,YAAaC,UAAWL,GAChC,CAAEI,KAAM,UAAWC,UANNJ,IAAMC,MAAK,kBAAM,kCAwBjBI,MAff,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,WAAD,CAAUC,SAAU,2CAClB,kBAAC,IAAD,KACGJ,EAAOK,KAAI,gBAAGJ,EAAH,EAAGA,KAAMC,EAAT,EAASA,UAAT,OACV,kBAAC,IAAD,CAAOI,IAAKL,EAAMM,OAAK,EAACN,KAAMA,EAAMO,UAAWN,OAEjD,kBAAC,IAAD,CAAU/B,GAAG,UCdHsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAYC,SAAS,KACnB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f5420d1d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Header.css\";\r\nimport { FaBars, FaTimes, FaDice } from \"react-icons/fa\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nconst Navigation = (props) => (\r\n  <>\r\n    <NavLink className=\"Nav-Link\" to=\"/tictactoe\">\r\n      Tic Tac Toe\r\n    </NavLink>\r\n    <NavLink className=\"Nav-Link\" to=\"/treasure\">\r\n      Treasure\r\n    </NavLink>\r\n    <NavLink className=\"Nav-Link\" to=\"/memory\">\r\n      Memory\r\n    </NavLink>\r\n  </>\r\n);\r\n\r\nconst NavigationDesktop = () => (\r\n  <nav className=\"Nav-Desktop\">\r\n    <Navigation />\r\n  </nav>\r\n);\r\nconst NavigationMobile = (props) => {\r\n  const { openDrawer, toggleDrawerHandler } = props;\r\n  let navClass = [\"Nav-Mobile\"];\r\n  if (!openDrawer) navClass.push(\"Close\");\r\n  return (\r\n    <div className=\"Mobile\">\r\n      <div className=\"Menubar\" onClick={toggleDrawerHandler}>\r\n        {openDrawer ? <FaTimes size=\"1.5rem\" /> : <FaBars size=\"1.5rem\" />}\r\n      </div>\r\n      <nav className={navClass.join(\" \")} onClick={toggleDrawerHandler}>\r\n        <Navigation />\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst Header = (props) => {\r\n  const [openDrawer, setOpenDrawer] = useState(false);\r\n\r\n  const toggleDrawerHandler = () => {\r\n    setOpenDrawer((prevState) => !prevState);\r\n  };\r\n\r\n  const onClickLogo = () => {\r\n    props.history.push(\"/\");\r\n    toggleDrawerHandler();\r\n  };\r\n  return (\r\n    <header className=\"Header\">\r\n      <div className=\"Logo\" onClick={onClickLogo}>\r\n        <FaDice size=\"3rem\" color=\"#fff\" />\r\n      </div>\r\n      <div>\r\n        <NavigationDesktop />\r\n        <NavigationMobile openDrawer={openDrawer} toggleDrawerHandler={toggleDrawerHandler} />\r\n      </div>\r\n    </header>\r\n  );\r\n};\r\n\r\nexport default withRouter(Header);\r\n","import React from \"react\";\r\nimport Header from \"./Header/Header\";\r\nimport \"./Layout.css\";\r\nconst layout = (props) => (\r\n  <div className=\"Layout\">\r\n    <Header />\r\n    <main>{props.children}</main>\r\n  </div>\r\n);\r\n\r\nexport default layout;\r\n","import React from \"react\";\r\nimport \"./Cube.css\";\r\n\r\nconst Cube = () => (\r\n  <div class=\"cubespinner\">\r\n    <div class=\"face1\">1</div>\r\n    <div class=\"face2\">2</div>\r\n    <div class=\"face3\">3</div>\r\n    <div class=\"face4\">4</div>\r\n    <div class=\"face5\">5</div>\r\n    <div class=\"face6\">6</div>\r\n  </div>\r\n);\r\n\r\nexport default Cube;\r\n","import React from \"react\";\r\nimport \"./Home.css\";\r\nimport Cube from \"../../components/Cube/Cube\";\r\n\r\nconst Home = () => (\r\n  <div className=\"Home\">\r\n    <h1>Play online game</h1>\r\n    <h3>Have some fun with our collection of fun, online games!</h3>\r\n\r\n    <div style={{ width: \"120px\", height: \"120px\", position: \"relative\", margin: \"6rem auto\" }}>\r\n      <Cube />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Home;\r\n","import React, { Suspense } from \"react\";\r\nimport { Switch, Route, Redirect } from \"react-router-dom\";\r\n\r\nimport Layout from \"./containers/Layout/Layout\";\r\nimport Home from \"./containers/Home/Home\";\r\nimport \"./App.css\";\r\n\r\nconst Treasure = React.lazy(() => import(\"./containers/TreasureGame/Treasure\"));\r\nconst TicTacToe = React.lazy(() => import(\"./containers/TicTacToeGame/TicTacToe\"));\r\nconst Memory = React.lazy(() => import(\"./containers/MemoryGame/Memory\"));\r\n\r\nconst routes = [\r\n  { path: \"/\", Component: Home },\r\n  { path: \"/tictactoe\", Component: TicTacToe },\r\n  { path: \"/treasure\", Component: Treasure },\r\n  { path: \"/memory\", Component: Memory },\r\n];\r\n\r\nfunction App() {\r\n  return (\r\n    <Layout>\r\n      <Suspense fallback={<h3>Loading...</h3>}>\r\n        <Switch>\r\n          {routes.map(({ path, Component }) => (\r\n            <Route key={path} exact path={path} component={Component} />\r\n          ))}\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </Suspense>\r\n    </Layout>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { HashRouter } from \"react-router-dom\";\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter basename=\"/\">\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}