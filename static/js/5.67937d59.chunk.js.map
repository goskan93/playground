{"version":3,"sources":["components/Button/Button.js","utility/treasureGridGenerator.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","containers/TreasureGame/Treasure.js"],"names":["button","props","className","btnClass","onClick","click","disabled","label","generateRandom","max","Math","round","random","generateTreasureGrid","grid","Array","filter","Boolean","length","index","j","i","floor","from","item","_toConsumableArray","arr","isArray","arrayLikeToArray","iter","Symbol","iterator","Object","unsupportedIterableToArray","TypeError","Treasure","useState","treasureGrid","setTreasureGrid","guessArray","setGuessArray","checked","setChecked","countTurns","setCountTurns","gameFinished","setGameFinished","useEffect","generateGrid","style","textAlign","updateGuessArray","forEach","el","ind","reduce","prev","curr","prevVal","fill","map","_","includes","unchecked","x","prevChecked","onClickBox","key"],"mappings":"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","file":"static/js/5.67937d59.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nconst button = (props) => (\r\n  <button className={`Button ${props.btnClass}`} onClick={props.click} disabled={props.disabled ? props.disabled : false}>\r\n    {props.label}\r\n  </button>\r\n);\r\n\r\nexport default button;\r\n","// ExAMPLE const grid = [3, 4, 3, 2, 1, 2, 3, 2, 3, 2, 1, 2, 3, 4, 3, 2, 3, 2, 3, 2, 3, 4, 3, 2, 1];\r\n\r\nexport const generateRandom = (max) => {\r\n  return Math.round(Math.random() * max) + 0;\r\n};\r\n\r\nconst generateTreasureGrid = () => {\r\n  let grid = new Array(25);\r\n  while (grid.filter(Boolean).length < 3) {\r\n    let index = generateRandom(24);\r\n    if (!grid[index]) {\r\n      grid[index] = 4;\r\n    }\r\n  }\r\n\r\n  let j = 4;\r\n  while (j > 1) {\r\n    for (let i = 0; i < grid.length; i++) {\r\n      if (grid[i] === j) {\r\n        if (Math.floor(i / 5) === Math.floor((i - 1) / 5) && !grid[i - 1]) grid[i - 1] = j - 1;\r\n        if (Math.floor(i / 5) === Math.floor((i + 1) / 5) && !grid[i + 1]) grid[i + 1] = j - 1;\r\n        if (i - 5 >= 0 && !grid[i - 5]) grid[i - 5] = j - 1;\r\n        if (i + 5 < 25 && !grid[i + 5]) grid[i + 5] = j - 1;\r\n      }\r\n    }\r\n    j--;\r\n  }\r\n  const gridPlay = Array.from(grid, (item) => item || 1);\r\n  return gridPlay;\r\n};\r\nexport default generateTreasureGrid;\r\n","import arrayWithoutHoles from \"./arrayWithoutHoles\";\nimport iterableToArray from \"./iterableToArray\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableSpread from \"./nonIterableSpread\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React, { useState, useEffect } from \"react\";\r\nimport \"./Treasure.css\";\r\nimport { FaQuestion, FaGem } from \"react-icons/fa\";\r\nimport generateTreasureGrid from \"../../utility/treasureGridGenerator\";\r\nimport Button from \"../../components/Button/Button\";\r\nconst Treasure = () => {\r\n  const [treasureGrid, setTreasureGrid] = useState([]);\r\n  const [guessArray, setGuessArray] = useState(Array(25));\r\n  const [checked, setChecked] = useState([]);\r\n  const [countTurns, setCountTurns] = useState(1);\r\n  const [gameFinished, setGameFinished] = useState(false);\r\n\r\n  useEffect(() => {\r\n    generateGrid();\r\n  }, []);\r\n\r\n  const generateGrid = () => {\r\n    const grid = generateTreasureGrid();\r\n    setTreasureGrid(grid);\r\n  };\r\n  const onClickBox = (index) => {\r\n    if (!gameFinished) {\r\n      if (!guessArray[index]) {\r\n        if (checked.includes(index)) {\r\n          //uncheck\r\n          const unchecked = checked.filter((x) => x !== index);\r\n          setChecked(unchecked);\r\n        } else {\r\n          checked.length < 3 && setChecked((prevChecked) => [...prevChecked, index]);\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const onCheck = () => {\r\n    let updateGuessArray = guessArray;\r\n    checked.forEach((el, ind, arr) => {\r\n      updateGuessArray[el] = treasureGrid[el];\r\n    });\r\n    setChecked([]);\r\n    setGuessArray(updateGuessArray);\r\n    const numberTresuresGuessed = updateGuessArray.reduce((prev, curr) => {\r\n      return curr === 4 ? prev + 1 : prev;\r\n    }, 0);\r\n    if (numberTresuresGuessed === 3) {\r\n      setGameFinished(true);\r\n    } else {\r\n      setCountTurns((prevVal) => prevVal + 1);\r\n    }\r\n  };\r\n\r\n  const onResetGame = () => {\r\n    setChecked([]);\r\n    setCountTurns(1);\r\n    setGuessArray(Array(25));\r\n    setGameFinished(false);\r\n    generateGrid();\r\n  };\r\n\r\n  return (\r\n    <div className=\"Treasure-Container\">\r\n      <h3 style={{ textAlign: \"center\" }}> {gameFinished ? `Game FInished! Youre score ${countTurns}` : `No. of turn: ${countTurns}`} </h3>\r\n      <div className=\"Buttons-Container\">\r\n        <Button label=\"PLAY AGAIN\" click={onResetGame} btnClass=\"BtnLight\" />\r\n        <Button label=\"CHECK\" click={onCheck} btnClass=\"BtnDark\" disabled={gameFinished} />\r\n      </div>\r\n      <ul className={gameFinished ? \"Treasure-Grid Disabled\" : \"Treasure-Grid\"}>\r\n        {Array(25)\r\n          .fill()\r\n          .map((_, index) => {\r\n            let className = checked.includes(index) ? \"Guess\" : guessArray[index] ? \"Guessed\" : \"\";\r\n            return (\r\n              <li onClick={() => onClickBox(index)} key={index} className={className}>\r\n                {checked.includes(index) ? <FaQuestion /> : guessArray[index] === 4 ? <FaGem /> : <span>{guessArray[index]}</span>}\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Treasure;\r\n"],"sourceRoot":""}